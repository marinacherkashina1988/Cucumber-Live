package apiSteps;

import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import io.restassured.path.json.JsonPath;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;
import org.junit.Assert;
import utils.APIConstants;
import utils.APIPayloadConstants;

import java.util.List;
import java.util.Map;
import java.util.Set;

import static io.restassured.RestAssured.given;


public class APISteps {

    RequestSpecification request;
    Response response;
    JsonPath jsPath;
    public static String employee_id;
    public static String token;

    @Given("JWT bearer token is generated by passing email {string} and password {string}")
    public void jwt_bearer_token_is_generated_by_passing_email_and_password(String email, String password) {
        request = given().
                header(APIConstants.HEADER_CONTENT_TYPE_KEY, APIConstants.HEADER_CONTENT_TYPE_VALUE).
                body(APIPayloadConstants.generateTokenPayload(email, password));
        response = request.when().post(APIConstants.GENERATE_TOKEN);
        token = "Bearer " + response.jsonPath().getString("token");
    }

    @Given("a request is prepared for creating an employee")
    public void a_request_is_prepared_for_creating_an_employee() {
        request = given().
                header(APIConstants.HEADER_CONTENT_TYPE_KEY,APIConstants.HEADER_CONTENT_TYPE_VALUE).
                header(APIConstants.HEADER_AUTHORIZATION_KEY,token).
                body(APIPayloadConstants.createEmployeePayload());
    }

    @When("POST call is made to create an employee")
    public void post_call_is_made_to_create_an_employee() {
        response = request.when().post(APIConstants.CREATE_EMPLOYEE);
    }

    @Then("status code is {int}")
    public void statusCodeIs(int code) {
        response.then().assertThat().statusCode(code);
    }

    @Then("the employee id {string} is stored and value is validated")
    public void the_employee_id_is_stored_and_value_is_validated(String empPath) {
        employee_id = response.jsonPath().getString(empPath);
        System.out.println("The employee id is " + employee_id);
    }

    @Given("a request is prepared for creating an employee using json payload")
    public void aRequestIsPreparedForCreatingAnEmployeeUsingJsonPayload() {
        request = given().
                header(APIConstants.HEADER_CONTENT_TYPE_KEY,APIConstants.HEADER_CONTENT_TYPE_VALUE).
                header(APIConstants.HEADER_AUTHORIZATION_KEY,token).
                body(APIPayloadConstants.createEmployeeJsonPayload());
    }

    @Given("request is prepred using data {string}, {string}, {string}, {string}, {string}, {string}, {string}")
    public void request_is_prepared_using_data(String firstname, String lastname, String middlename, String gender, String birthday, String status, String jobtitle) {
        request = given().
                header(APIConstants.HEADER_CONTENT_TYPE_KEY, APIConstants.HEADER_CONTENT_TYPE_VALUE).
                header(APIConstants.HEADER_AUTHORIZATION_KEY,token).
                body(APIPayloadConstants.createEmployeeJsonPayloadDynamic
                        (firstname,lastname,middlename,
                                gender,birthday,status,jobtitle));
    }

    @Given("request to get one employee is prepared")
    public void request_to_get_one_employee_is_prepared() {
        request = given().
                header(APIConstants.HEADER_CONTENT_TYPE_KEY,APIConstants.HEADER_CONTENT_TYPE_VALUE).
                header(APIConstants.HEADER_AUTHORIZATION_KEY,token).
                queryParam("employee_id",employee_id);
    }

    @When("GET request is called to retrieve an employee")
    public void get_request_is_called_to_retrieve_an_employee() {
        response = request.when().get(APIConstants.GET_ONE_EMPLOYEE);
        System.out.println(employee_id);
    }

    @Then("the employee id is verified {string}")
    public void the_employee_id_is_verified(String responseId) {
        String actualID = response.body().jsonPath().getString(responseId);
        Assert.assertEquals(employee_id, actualID);
    }

    @Then("response data of get employee has to be equal to the response body of employee created request")
    public void response_data_of_get_employee_has_to_be_equal_to_the_response_body_of_employee_created_request(io.cucumber.datatable.DataTable dataTable) {
        //it is coming from features file passed as data table
        List<Map<String, String>> expectedData = dataTable.asMaps();
        //it is coming from response body like in postman
        Map<String, String> actualData = response.jsonPath().get("employee");
        //to compare values
        for(Map<String, String> employeeData:expectedData ){
            //to get unique keys
            Set<String> keys = employeeData.keySet();
            //to get one at the time
            for(String key:keys){

                String expectedValue = employeeData.get(key);
                String actualValue = actualData.get(key);
                Assert.assertEquals(expectedValue, actualValue);
            }
        }
    }

    @Given("request to update employee is prepared by passing {string}, {string}, {string}, {string}, {string}, {string},  {string}")
    public void request_to_update_employee_is_prepared_by_passing(String firstname, String lastname, String middlename, String gender, String birthday, String status, String jobtitle) {
        request = given().
                header(APIConstants.HEADER_CONTENT_TYPE_KEY,APIConstants.HEADER_CONTENT_TYPE_VALUE).
                header(APIConstants.HEADER_AUTHORIZATION_KEY,token).
                body(APIPayloadConstants.updateEmployee(firstname, lastname, middlename, gender, birthday, status, jobtitle));
    }

    @When("PUT request is called to update an employee")
    public void put_request_is_called_to_update_an_employee() {
        response = request.when().put(APIConstants.UPDATE_EMPLOYEE);
    }

    @Then("Message {string} is displayed and verified")
    public void message_is_displayed(String msg) {
        String currentMsg = response.body().jsonPath().getString("Message");
        Assert.assertEquals(msg, currentMsg);
    }

    @Given("request to partially update an employee is prepared by passing updated lastname {string}")
    public void request_to_partially_update_an_employee_is_prepared_by_passing_updated_lastname(String lastname) {
        request = given().
                header(APIConstants.HEADER_CONTENT_TYPE_KEY,APIConstants.HEADER_CONTENT_TYPE_VALUE).
                header(APIConstants.HEADER_AUTHORIZATION_KEY,token).
                body(APIPayloadConstants.partialUpdateEmployee(lastname));
    }

    @When("PATCH request is called to update an employee")
    public void patchRequestIsCalledToUpdateAnEmployee() {
        response = request.when().patch(APIConstants.PARTIAL_UPDATE_EMPLOYEE);
    }

    @Given("request to delete employee is prepared")
    public void requestToDeleteEmployeeIsPrepared() {
        request = given().
                header(APIConstants.HEADER_CONTENT_TYPE_KEY,APIConstants.HEADER_CONTENT_TYPE_VALUE).
                header(APIConstants.HEADER_AUTHORIZATION_KEY,token).
                queryParam("employee_id", employee_id);
        System.out.println(employee_id + " found");
    }

    @When("DELETE request is called to delete an employee")
    public void deleteRequestIsCalledToDeleteAnEmployee() {
        response = request.when().delete(APIConstants.DELETE_EMPLOYEE);
        System.out.println("Request sent");
    }

    @Then("{string} message is displayed")
    public void messageIsDisplayed(String message) {
        String currentMsg = response.body().jsonPath().getString("message");
        Assert.assertEquals(message, currentMsg);
    }

    @Given("request to retrieve all employees is prepared")
    public void requestToRetrieveAllEmployeesIsPrepared() {
        request = given().
                header(APIConstants.HEADER_CONTENT_TYPE_KEY,APIConstants.HEADER_CONTENT_TYPE_VALUE).
                header(APIConstants.HEADER_AUTHORIZATION_KEY,token);
    }

    @When("GET request is called to retrieve all employees")
    public void getRequestIsCalledToRetrieveAllEmployees() {
        response = request.when().get(APIConstants.GET_ALL_EMPLOYEES);
    }

    @Then("we can access all employee IDs")
    public void weCanAccessAllEmployeeIDs() {
        jsPath = response.jsonPath();
        List<String> employeeIDs = jsPath.get("Employees.employee_id");
        for (String id : employeeIDs) {
            System.out.println(id);
        }
    }

    @Given("request to retrieve job titles is prepared")
    public void requestToRetrieveJobTitlesIsPrepared() {
        request = given().
                header(APIConstants.HEADER_CONTENT_TYPE_KEY,APIConstants.HEADER_CONTENT_TYPE_VALUE).
                header(APIConstants.HEADER_AUTHORIZATION_KEY,token);
    }

    @When("GET request is called to retrieved job titles")
    public void getRequestIsCalledToRetrievedJobTitles() {
        response = request.when().get(APIConstants.GET_JOB_TITLE);
    }

    @Then("we can access all job titles")
    public void weCanAccessAllJobTitles() {
        jsPath = response.jsonPath();
        List<String> jobTitles = jsPath.get("Jobs.job");
        for (String jobTitle : jobTitles) {
            System.out.println(jobTitle);
        }
    }

    @Given("request to retrieve employment status is prepared")
    public void requestToRetrieveEmploymentStatusIsPrepared() {
        request = given().
                header(APIConstants.HEADER_CONTENT_TYPE_KEY,APIConstants.HEADER_CONTENT_TYPE_VALUE).
                header(APIConstants.HEADER_AUTHORIZATION_KEY,token);
    }

    @When("GET request is called to retrieve all employees employment status")
    public void getRequestIsCalledToRetrieveAllEmployeesEmployementStatus() {
        response = request.when().get(APIConstants.GET_EMPLOYMENT_STATUS);
    }

    @Then("we can access all employees employment status")
    public void weCanAccessAllEmployeesEmploymentStatus() {
        jsPath = response.jsonPath();
        System.out.println(response.getBody().asString());
/*        List<Map<String, Object>> employmentStatus = jsPath.getList("Employeement Status");
        List<String> jobStatus = new ArrayList<>();

        for (Map<String, Object> status : employmentStatus) {
            jobStatus.add((String) status.get("name"));
        }

        for (String status : jobStatus) {
            System.out.println(status);
        }*/
    }

}
